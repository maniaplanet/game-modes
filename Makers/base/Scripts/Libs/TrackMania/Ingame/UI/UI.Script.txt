/** 
 *	In-Game UI library
 */
 

#Include "TextLib" as TL

#Include "Libs/Nadeo/Common/ManialinkTools/Manialink3WPrevAnims.Script.txt"  					    as Manialink
#Include "Libs/Nadeo/Common/Ingame/IngameLayers.Script.txt" 							        as Layers
#Include "Libs/Trackmania/HSVColors.Script.txt" 				            as Hue
#Include "Libs/Nadeo/MP4/Common/ManialinkTools/FontManager.Script.txt" 				        as Font
#Include "Libs/Trackmania/Ingame/Medals.Script.txt" 			            as Medals
#Include "Libs/Nadeo/MP4/Common/Colors.Script.txt" 					            as Colors
#Include "Libs/Nadeo/Common/ManialinkTools/UIPadButtons.Script.txt"						        as UIButtons
#Include "Libs/Trackmania/Prompter2.Script.txt"				                as Prompter2
#Include "Libs/Trackmania/Ingame/UI/SplitScreenLibManialinkCoef.Script.txt"	as SplitScreenLibManialinkCoef

#Const Version		"2016-03-01"
#Const ScriptName	"UI.Script.txt"

#Const IMGPATH								"file://Media/MEDIABROWSER_HiddenResources/Common/Images/"
#Const SOUNDPATH							"file://Media/Sounds/TMConsole/"
#Const SOUNDPATH_VOICES						"file://Media/Sounds/TMConsole/Voices/"
#Const VIDEOPATH							"file://Media/Manialinks/Trackmania/Video/"

//////////////////////////////////////////
// IMAGES
#Const IMG_PRESS_TO_RESTART_BG				"press-to-restart-bg.dds"
#Const IMG_DOUBLEDRIVER_LOGO				"dd-logo.dds"
#Const IMG_FG								"slot-medium-fg.dds"
#Const IMG_BG								"slot-medium-bg.dds"
#Const IMG_BG_LINE							"menu-bg-1.dds"
#Const IMG_LAP								"lap.dds"
#Const IMG_ENGINE_OFF						"engine-off.dds"
#Const IMG_ENGINE_ON						"engine-on.dds"
#Const IMG_MEDAL_EMPTY						"medal-empty.dds"
#Const IMG_TURBO							"turbo.dds"
#Const IMG_RTLOGO01							"randomtracklogo01.png"
#Const IMG_RTLOGO02							"randomtracklogo02.png"

#Const IMG_INTRO_3							"race-3.dds"
#Const IMG_INTRO_2							"race-2.dds"
#Const IMG_INTRO_1							"race-1.dds"
#Const IMG_INTRO_GO							"race-go.dds"
#Const IMG_INTRO_GO2						"race-go2.dds"
#Const IMG_INTRO_GLOW_3						"race-3-glow.dds"
#Const IMG_INTRO_GLOW_2						"race-2-glow.dds"
#Const IMG_INTRO_GLOW_1						"race-1-glow.dds"
#Const IMG_INTRO_GLOW_GO					"race-go-glow.dds"


//////////////////////////////////////////
// SOUNDS
#Const SOUND_VOICE_CHECKPOINT_1				"Voices/voice-checkpoint-1.wav"
#Const SOUND_VOICE_CHECKPOINT_2				"Voices/voice-checkpoint-2.wav"
#Const SOUND_VOICE_CHECKPOINT_3				"Voices/voice-checkpoint-3.wav"
#Const SOUND_VOICE_CHECKPOINT_4				"Voices/voice-checkpoint-4.wav"
#Const SOUND_VOICE_CHECKPOINT_YES			"Voices/voice-checkpoint-yes-"
#Const SOUND_VOICE_CHECKPOINT_NO			"Voices/voice-checkpoint-no-"
#Const SOUND_VOICE_CARHIT					"Voices/voice-carhit-"
#Const SOUND_SPEEDEFFECT 					"event-speedeffect.wav"
#Const SOUND_CHECKPOINT_TIME 				"checkpoint-time.wav"
#Const SOUND_CHECKPOINT_NO 					"checkpoint-no.wav"
#Const SOUND_CHECKPOINT_YES 				"checkpoint-yes.wav"
#Const SOUND_CHECKPOINT_LAP 				"checkpoint-lap.wav"
#Const SOUND_ENDRACE_YES 					"endrace-yes.wav"
#Const SOUND_ENDRACE_NO						"endrace-no.wav"
#Const SOUND_CROWD_YES						"checkpoint-crowd-yes.ogg"
#Const SOUND_CROWD_NO						"checkpoint-crowd-no.ogg"
#Const SOUND_WHOOSHTEST 					"whooshtest-mono.wav"
#Const SOUND_SHOWLINE 						"event-woosh-small.wav"
#Const SOUND_RACE_1 						"race-1.wav"
#Const SOUND_RACE_2 						"race-2.wav"
#Const SOUND_RACE_3 						"race-3.wav"
#Const SOUND_RACE_GO						"race-go.wav"
#Const SOUND_DRIFTRISE 						"skid-gauge.wav"
#Const SOUND_ISFLYING 						"state-flying.ogg"
#Const SOUND_ISFREEWHEEL					"state-freewheel.ogg"
	



//////////////////////////////////////////
// VIDEO

#Const VIDEO_SPEEDSTEP   					"video_smoke_green.webm"
#Const VIDEO_BGANIM_MESSAGE					"hud_bganim_msg.webm"

//////////////////////////////////////////
// ALIGN

#Const vT 	""" valign="top" """
#Const vB 	""" valign="bottom" """
#Const vC 	""" valign="center" """
#Const hC 	""" halign="center" """
#Const hR 	""" halign="right" """



//////////////////////////////////////////
// NON-SETTINGS CONST

#Const C_LAYERNAME_PRESS_TO_RESTART			"PressToRestart"
#Const C_LAYERNAME_UI						"Race"
#Const C_LAYERNAME_UICHEATCODE				"UICheatCode"
#Const C_LAYERNAME_TIMEOUT					"TimeOut"

#Const C_RATIO 								12.962

#Const C_LEFT								0
#Const C_HCENTER							1
#Const C_RIGHT								2
#Const C_NONE								3

#Const C_RATIO_1CIRCLE						0.06666666667
#Const C_DURATION_LABELSHOW					2000
#Const C_DELAY_LAP							0
#Const C_DELAY_ENDRACE						1500



//////////////////////////////////////////
// RACE ML SETTINGS

#Const C_RACE_CLIP_OFFSET 					0.2
#Const C_RACE_FREEWHEEL_SIZE_X 				46.
#Const C_RACE_MAPNAME_SIZE_X 				70.
#Const C_RACE_MAPNAME_TEXTSIZE_SIGN 		5
#Const C_RACE_MAPNAME_TEXTSIZE_NAME			7
#Const C_RACE_MAPNAME_MARGIN_SIGN			3
#Const C_RACE_MAPNAME_POSX_MEDAL			-1
#Const C_RACE_MAPNAME_SIZE_MEDAL			18
#Const C_RACE_MAPNAME_POSY_LAP				-11.5
#Const C_RACE_MAPNAME_POSY_LAPTEXT			-1.5
#Const C_RACE_MAPNAME_SIZE_LAP				6
#Const C_RACE_SPEEDVIDEO_SIZERATIO			1.02
#Const C_RACE_DOUBLEDRIVER_LOGO_SIZEX		52

//////////////////////////////////////////
// REWARD ML SETTINGS

#Const C_REWARDS_TRANSITION_SIZE_X			1012.5
#Const C_REWARDS_BUTTON_SIZE_X				10
#Const C_REWARDS_TEXT_INTERVAL				-0.13
#Const C_REWARDS_PRESSTOCONTINUE_INTERVAL	1
#Const C_REWARDS_PRESSTOCONTINUE_POSY		-75



//////////////////////////////////////////
// PRESS TO RESTART ML SETTINGS

#Const C_PRESSTORESTART_IMG_SIZE 			60
#Const C_PRESSTORESTART_TEXT_SIZE 			4
#Const C_PRESSTORESTART_TEXT_INTERLIGN 		-0.5



//////////////////////////////////////////
// SPEED COUNTER 

#Const C_SPEED_SIZEGAUGE					30.
#Const C_SPEED_SIZEGAUGE_RATIO				1.75
#Const C_SPEED_FULLCIRCLEVALUE				400.
#Const C_GAUGE_OPACITY						0.6
#Const C_GAUGEPERSISTENT_OPACITY			0.5
#Const C_GAUGEPERSISTENT_FADEDURATION		3000



//////////////////////////////////////////
// CHECKPOINT TIMER SETTINGS

// THE TEXT SIZE IS THE DEFAULT ONE USED OTHER COUNTERS (C_TEXT_DEFAUTSIZE), WITH A SCALE APPLIED TO THE WHOLE FRAME (C_TEXT_CHECKPOINT_SCALE)
#Const C_TEXT_CHECKPOINT_SCALE 				1.

#Const C_Y_SPACEBETWEEN_CHECKPOINTTIME		11.
#Const C_X_SPACEBETWEEN_CHECKPOINTTIME		30.

#Const C_CHECKPOINT_SHOW_DURATION			1500



//////////////////////////////////////////
// GENERAL SETTINGS

#Const C_TEXT_DEFAUTSIZE 					5

// HERE TO SET THE UI MARGINS FOR THE "90%"
// 1. = 10% Vertically & 10% Horizontally (16/9)
#Const C_MARGINS_GLOBALRATIO				1.


#Const C_WHITE_OPACITY						0.85
#Const C_SPEED_ANIM_BLINKSPEED				0.0125
#Const C_SPEED_SLOWANIM_BLINKSPEED			0.0185
#Const C_TURBO_ANIM_BLINKSPEED				0.100
#Const C_PERFECT_LANDING_ANIM_BLINKSPEED	0.040
#Const C_COMBO_ALMOST_FINISHED_BLINKSPEED	0.040
#Const C_COMBO_ALMOST_FINISHED_DURATION		1000


#Const C_COMMENTARIES_MAXCOUNT_CP_YES 		23
#Const C_COMMENTARIES_MAXCOUNT_CP_NO 		38
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_YES 	18
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_NO 	37
#Const C_COMMENTARIES_MAXCOUNT_CARHIT 		16

#Const C_COMMENTARIES_CARHIT_MIN_INTERVAL	2000
#Const C_COMMENTARIES_TOPLAY_EACH_XX_CP_MIN	2
#Const C_COMMENTARIES_TOPLAY_EACH_XX_CP_MAX 4
#Const C_COMMENTARIES_DELAY					400

#Const TMC_MEDAL_AUTHOR						0
#Const TMC_MEDAL_GOLD						1
#Const TMC_MEDAL_SILVER						2
#Const TMC_MEDAL_BRONZE						3
#Const TMC_MEDAL_PLAYER						4
#Const TMC_MEDAL_NONE						5
#Const TMC_MEDAL_ANOTHERPLAYER				6

#Const C_ColorRGB_Red  <0.980, 0.149, 0.149>
#Const C_ColorRGB_Blue <0.149, 0.149, 0.980>

// Sounds
#Const C_SoundPath "file://Media/Manialinks/Nadeo/Trackmania/Ingame/Sound/"
#Const C_Sound_Checkpoint "RaceCheckPoint_Experimental.wav"
#Const C_Sound_CheckpointLate "RaceCheckPointLate_Experimental.wav"
#Const C_Sound_CheckpointAhead "RaceCheckPointAhead_Experimental.wav"

declare CTmMode	G_Mode;
declare Text 	G_ModeName;
declare Integer G_SpawnDuration;
	
declare Text 	G_FontTitle;
declare Text 	G_FontMain;
declare Text 	G_FontMainSmall;
declare Text 	G_FontChrono;
declare Text 	G_FontNumberBig;
declare Text	G_SubFont;

declare Boolean G_IsSplitScreen;


// ---------------------------------- //
/** Create the Race manialink
 *
 *	@return	The manialink Text
 */

Text Private_GetMLRace(Real _Scale, Vec2 _PosRatio, Real _SpecialScale, Vec2 _ClipSize) {
	declare Text QuadStyleGauge				= """ pos="0 0" z-index="0.2" size="{{{C_SPEED_SIZEGAUGE*0.5}}} {{{C_SPEED_SIZEGAUGE}}}" {{{vC^hR}}} """;

	declare Text Ingame_Medal          = "Ingame/Ingame_Medal.dds";
	declare Text IMG_FooterKMH         = "Ingame/FooterKMH.dds";
	declare Text IMG_Arrow             = "Ingame/Arrow.dds";
	declare Text IMG_Arrow2            = "Ingame/Arrow2.dds";
	declare Text IMG_FootLine_RaceTime = "Ingame/FootLine_RaceTime.dds";
	declare Text IMG_FootLine_Distance = "Ingame/FootLine_Distance.dds";
	declare Text IMG_FootLine_Laps     = "Ingame/FootLine_Laps.dds";
	declare Text IMG_Chrono            = "Ingame/Chrono.dds";
	declare Text IMG_SpeedGaugeBG      = "Ingame/SpeedGaugeBG2.dds";
	//declare Text IMG_MiniMedal         = "Menus/Buttons/medal-author-mini.dds";
	declare Text IMG_MiniMedal         = "Ingame/Medal.dds";
	declare Text IMG_FakeThumbnail     = "Ingame/ToDel/FakeThumbnail.dds";
	declare Text IMG_SpeedBarre        = "Ingame/SpeedBarre.dds";
	
	declare Text Split_RankBG          = "Ingame/Modes/Split_RankBG.dds";

	declare Integer Count_PlayerInfo   = 10;


	declare Text ML = """
<manialink version="3" name="L_UIIngame">
	<framemodel id="FrameModel_PlayerInfo">
		<label id="Label_PlayerName" halign="left"   valign="center" z-index="1." pos="-12. 0.5" textsize="2" size="22.5" text="" textfont="{{{G_FontMain}}}"/>
		<label id="Label_PlayerTime" halign="left"   valign="center" z-index="1." pos="12.7 0.5" textsize="4" scale="0.9" textprefix="$t" size="25" text="0:36:45"   textfont="{{{G_FontMain}}}"/>
		<quad  id="Quad_Flag"        halign="center" valign="center" z-index="1" pos="-19.0 0" size="6.0 5" bgcolor="009" keepratio="Fit"/>
		
		<frame id="Frame_ClipWayPointLeft" pos="0 0" clip="True" clippos="-20 0" clipsizen="100 7" >
			<quad  id="Quad_Bg1"     halign="center"  valign="center" z-index="0" pos="-19.4 0." rot="-12" size="9 10" style="Bgs1" substyle="BgDialogBlur" opacity="0.3" bluramount="0.1"/>
			<quad  id="Quad_Bg2"     halign="center"  valign="center" z-index="0" pos="13.4 0." rot="-12" size="55.2 23" style="Bgs1" substyle="BgDialogBlur" opacity="0.7" bluramount="0.1"/>
			<quad  id="Quad_BgColor" halign="center"  valign="center" z-index="0" pos="4.3 0." rot="-12" size="55.2 23" bgcolor="090" opacity="0."/>
			
			<quad  id="Quad_Test"     halign="center"  valign="center" z-index="0" pos="0 0." size="320 180"  bgcolor="090" opacity="0."/>
		</frame>

		<quad                        halign="center" valign="center" z-index="1" pos="11.0 0" size="3 3" image="{{{IMGPATH^IMG_Arrow}}}" keepratio="Fit" opacity="0.6"/>
	</framemodel>

	<framemodel id="FrameModel_WayPointInfo">
		<quad z-index="0" pos="0 0" size="30 6.7" style="Bgs1" substyle="BgDialogBlur" opacity="0.5" bluramount="0.1" hidden="1"/>
		<quad z-index="0" pos="0 0" size="30 6.7"  opacity="0.5" bgcolor="0b081b" hidden="0"/>
		<quad id="Quad_Img" halign="center" valign="center" z-index="1" pos="3.7 -3.5" size="5 5" image="{{{IMGPATH^IMG_Chrono}}}" keepratio="Fit" opacity="0.9"/>
		<quad id="Quad_Color" z-index="1" pos="0 0" size="30 6.7" bgcolor="f33" opacity="0.4" hidden="1"/>
		<label id="Label_WayPointInfo" halign="center" valign="center" z-index="2" pos="16.9 -2.8" size="30" textsize="3.5" text="1:01:20" textfont="{{{G_FontMain}}}"/>
	</framemodel>

	<frame id="Frame_All" scale="{{{_Scale}}}" clip="True" clipsizen="{{{_ClipSize.X}}} {{{_ClipSize.Y}}}" pos="{{{_PosRatio.X}}} {{{_PosRatio.Y}}}">
		<quad halign="center" valign="center" size="320 180" image="{{{IMGPATH}}}Ingame/ToDel/Mockup SplitScreen2.jpg" hidden="1" opacity="1.0" z-index="-4"/>

		<frame id="Frame_RankSplit" z-index="0" pos="-38.4 120.6" hidden="1">
			<quad id="Quad_RankSplitBG"  z-index="0" image="{{{IMGPATH^Split_RankBG}}}" colorize="111" size="39 39" opacity="0.8" keepratio="Fit"/>
			<label id="Label_RankSplit"  z-index="2"  halign="center" valign="center" pos="15 -12" size="34" textsize="30" text="1" textfont="{{{G_FontMain}}}" textcolor="fff"/>
			<label id="Label_RankSplit2" z-index="2"  halign="left" valign="center" pos="21 -5.5" size="34" textsize="4" text="ST" textfont="{{{G_FontMain}}}" textcolor="fff"/>
			<quad id="Quad_RankSplitBG"  z-index="2"  halign="center" valign="center" bgcolor="ff0" size="0.4 25.5" opacity="0.4" pos="35 -15.5"/>
		</frame>

		<frame id="Frame_MapTitle" z-index="1" pos="-150 80" hidden="1">
			<frame id="Frame_Line" pos="44 7.2">
				<quad halign="right" valign="center" size="62 0.2" z-index="0" pos=".0 0."  opacity="0.5" bgcolor="fff" />
				<quad halign="right"  valign="bottom" size="6.7 0.6" z-index="0" pos="0 0."  opacity="0.5" bgcolor="fff" />
			</frame>

			<label id="Label_MapName"  halign="left" valign="center" z-index="2" pos="9 0" size="34" textsize="12" text="" textfont="{{{G_FontMain}}}" textcolor="fff"/>
			<label id="Label_MapName2" halign="left" valign="center" z-index="2" pos="9 -9.7" size="30" textsize="4" text="{{{"By Nadeo"}}}" textfont="{{{G_SubFont}}}" textcolor="fff" textprefix="$t"/>
			<quad halign="center" valign="center" size="0.7 17.2" z-index="2" pos="5.2 -4.1" opacity="1." bgcolor="fff" id="Frame_Foot"/>

			<quad halign="right" valign="center" z-index="0" pos="1.9 -4.6" size="13 18" image="{{{IMGPATH^Ingame_Medal}}}" opacity="1.0" colorize="{{{Colors::GetColorXml("Gold")}}}" keepratio="Fit"/>

			<quad halign="left"  valign="center" z-index="0" pos="2.2 -4.6" size="42 20" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1"/>
			<quad halign="left"  valign="center" z-index="0" pos="2.2 -4.6" size="42 20" bgcolor="888" opacity="0.3"/>
			<quad halign="right" valign="center" z-index="0" pos="1.9 -4.6" size="13 20" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1"/>
			<quad halign="right" valign="center" z-index="0" pos="1.9 -4.6" size="13 20" bgcolor="888" opacity="0.3"/>
			
			<quad halign="right"  valign="center" z-index="1" pos="44.2 -4.6" size="42 20" image="{{{IMGPATH^IMG_FakeThumbnail}}}" opacity="0."/>
		</frame>

		<frame id="Frame_WayPoint" z-index="1" pos="0.5 15." hidden="0" scale="0.9">
			<quad id="Quad_Ligne" halign="center" valign="center" z-index="6" pos="0 36" size="0.4 0" bgcolor="eee" opacity="0.5"/>
			
			<frame id="Frame_ClipWayPointLeft" z-index="0" pos="-30" clip="True" clipposn="10 30" clipsizen="40 80" >
				<quad id="Quad_TODEL" halign="center" valign="center" z-index="2" pos="0 0" size="320 180" bgcolor="009" hidden="1"/>
				<frameinstance id="Frame_WayPointInfo0"  z-index="1" pos="31. 26."  modelid="FrameModel_WayPointInfo" />
				<frameinstance id="Frame_WayPointInfo2"  z-index="1" pos="31. 43.3" modelid="FrameModel_WayPointInfo" />
			</frame>
			<frame id="Frame_ClipWayPointRight" clip="True" clipposn="20 30" clipsizen="40 80" >
				<quad id="Quad_TODEL" halign="center" valign="center" z-index="2" pos="0 0" size="320 180" bgcolor="009" hidden="1"/>
				<frameinstance id="Frame_WayPointInfo3"  z-index="1" pos="-31. 26." modelid="FrameModel_WayPointInfo" hidden="1" />
				<frameinstance id="Frame_WayPointInfo1"  z-index="1" pos="-31. 43.3" modelid="FrameModel_WayPointInfo" />
			</frame>
		</frame>

		<frame id="Frame_Speed" z-index="0" pos="227.8 -156" hidden="0">
			<label id="Label_Speed"    halign="center" valign="center" z-index="1" pos="0 0" size="30" textsize="17." text="0"      textfont="{{{G_FontChrono}}}"/>
			<label id="Label_Distance" halign="right" valign="center" z-index="1" pos="22.8 -17" size="19" textsize="6" text="0"        textfont="{{{G_FontChrono}}}"/>
			<label                     halign="left" valign="center" z-index="1" pos="23.5 -18.7" size="30" textsize="3" text="KM"  textfont="{{{G_FontMain}}}"/>
			
			<quad id="Quad_SpeedBarre" halign="right" valign="center" z-index="1" pos="0 0" size="8 8" image="{{{IMGPATH^IMG_SpeedBarre}}}" hidden="0" keepratio="Fit" colorize="fff"/>
			
		

			<quad                      halign="center" valign="center" pos="-0.2 -2.0 0" size="55.3 55.3" image="{{{IMGPATH^IMG_SpeedGaugeBG}}}" keepratio="Fit" opacity="1.0"/>
			
			<quad halign="center" valign="center" z-index="0" pos="7.7 -9.4"   size="41 24" image="{{{IMGPATH^IMG_FooterKMH}}}" opacity="1.0" colorize="{{{Colors::GetColorXml("Gold")}}}" keepratio="Fit"/>
			<quad halign="center" valign="center" z-index="0" pos="18.0 -23.3" size="20 24" image="{{{IMGPATH^IMG_FootLine_Distance}}}" opacity="1.0" colorize="{{{Colors::GetColorXml("Gold")}}}" keepratio="Fit"/>

			<frame id="Frame_SpeedGauge" scale="1.82" pos="0 -2">
				
				<frame id="Frame_ClipLeft" clip="True" clipposn="{{{-C_SPEED_SIZEGAUGE*0.25-C_RACE_CLIP_OFFSET+0.153}}} 0" clipsizen="{{{C_SPEED_SIZEGAUGE*0.5}}} 	{{{C_SPEED_SIZEGAUGE}}}" >
				""";
				for(I, 1, 3) ML ^= """
					<quad id="Quad_GaugePersistentLeft{{{I}}}"	{{{QuadStyleGauge}}} image="{{{IMGPATH}}}Ingame/NewSpeed-gauge{{{I}}}.dds" rot="0" colorize="fff" opacity="0." />
					<quad id="Quad_GaugeLeft{{{I}}}"			{{{QuadStyleGauge}}} image="{{{IMGPATH}}}Ingame/NewSpeed-gauge{{{I}}}.dds" rot="0" colorize="fff" opacity="{{{C_GAUGE_OPACITY}}}" />
				""";
				ML ^= """	
				</frame>
				
				<frame id="Frame_ClipRight" clip="True" clipposn="{{{C_SPEED_SIZEGAUGE*0.25+C_RACE_CLIP_OFFSET-0.152}}} 0" clipsizen="{{{C_SPEED_SIZEGAUGE*0.5}}} 	{{{C_SPEED_SIZEGAUGE}}}">
				""";
				for(I, 1, 3) ML ^= """
					<quad id="Quad_GaugePersistentRight{{{I}}}"		{{{QuadStyleGauge}}} image="{{{IMGPATH}}}Ingame/NewSpeed-gauge{{{I}}}.dds" rot="180" colorize="fff" opacity="0." />
					<quad id="Quad_GaugeRight{{{I}}}"				{{{QuadStyleGauge}}} image="{{{IMGPATH}}}Ingame/NewSpeed-gauge{{{I}}}.dds" rot="180" colorize="fff" opacity="{{{C_GAUGE_OPACITY}}}" />
				""";
				ML ^= """	
				</frame>

			</frame>

		</frame>

		<frame id="Frame_Laps" pos="-152 -76" hidden="1">
			<label id="Label_LapsPlayer" halign="right" valign="center" z-index="1" pos="5.1 -0.6" size="30" textsize="13" textcolor="fff" text="2" textfont="{{{G_FontMain}}}"/>
			<label id="Label_LapsMax" halign="left" valign="center" z-index="1" pos="6.1 -2.5" size="30" textsize="9" text="/5" textfont="{{{G_FontMain}}}"/>
			<label id="Label_Laps" halign="left" valign="center" z-index="1" pos="0 0" size="30" textsize="13" text="" textfont="{{{G_FontMain}}}" hidden="1"/>
			<frame z-index="1" pos="21.9 -0.4">
				<quad  halign="center" valign="center" z-index="1" pos="0.  -4" size="9.7 5" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1"/>
				<quad  halign="center" valign="center" z-index="1" pos="0.  -4" size="9.7 5" bgcolor="888" opacity="0.3"/>
				<label halign="center" valign="center" z-index="1" pos="0.2 -3.7" size="9.7" textsize="2" scale="1" text="Laps" textfont="{{{G_FontMain}}}"/>
				<quad  halign="center" valign="center" z-index="0" pos="0.1 -7.0" size="9.7 24" image="{{{IMGPATH^IMG_FootLine_Laps}}}" opacity="0.3" colorize="{{{Colors::GetColorXml("Gold")}}}" keepratio="Fit"/>
			</frame>
		</frame>

		<frame id="Frame_RacePosition" pos="140 80" hidden="1">
		""";
		for(I, 0, Count_PlayerInfo)
		{
			declare Real PosY = 1.8 - 7.8*I;
				ML ^= """	
			<frameinstance id="Frame_Player{{{I}}}"  z-index="1"	pos="-10 {{{PosY}}}" modelid="FrameModel_PlayerInfo" />
		""";
		}
				ML ^= """	
		</frame>

		<frame id="Frame_Chrono" pos="0 -76.5" hidden="1">
			<label id="Label_Chrono" halign="right" valign="center" z-index="1" pos="19.25 0" size="50" textsize="2" scale="4" text="0" textfont="{{{G_FontChrono}}}"/>
			<quad  halign="center" valign="center" z-index="1" pos="29.1 -4" size="15.2 5" style="Bgs1" substyle="BgDialogBlur" opacity="0.1" bluramount="0.1"/>
			<quad  halign="center" valign="center" z-index="1" pos="29.1 -4" size="15.2 5" bgcolor="888" opacity="0.3"/>
			<label halign="center" valign="center" z-index="1" pos="29.3 -3.7" size="15" textsize="2" scale="1" text="RACE TIME" textfont="{{{G_FontMain}}}"/>
			<quad  halign="center" valign="center" z-index="0" pos="29.2 -7.0" size="15.6 24" image="{{{IMGPATH^IMG_FootLine_RaceTime}}}" opacity="0.3" colorize="{{{Colors::GetColorXml("Gold")}}}" keepratio="Fit"/>
		</frame>

	</frame>

<script><!--

{{{Manialink::GetIncludes()}}}

#Const DebugName  					"L_UI"
#Const C_MaxRotationLeft 			0.
#Const C_MaxRotationRight 			100.
#Const C_ColorMedals		[0 => {{{Colors::GetColor("GreenMaster")}}} , 1 =>  {{{Colors::GetColor("GoldShiny")}}} , 2 =>  {{{Colors::GetColor("SilverShiny")}}},
								3 =>  {{{Colors::GetColor("BronzeShiny")}}} , 4 => <0., 0., 0.>]
#Const C_MedalsName		[0 => _("Author"), 1 => _("Gold"), 2 => _("Silver"), 3 => _("Bronze"), 4 => _("Personal Record")]

declare Real    		 G_FadeOpacity;
declare Integer[Integer] G_PlayersWayPointTime;
declare Integer          G_HideWaypoint;
declare Integer          G_PrevCurrentNbLaps;
declare Integer[Integer] G_LapRecordByCheckpointTime;
declare Integer[Integer] G_ActualCheckpointTime;
declare Integer          G_BestLapTime;


{{{Manialink::Load()}}}

Text GetRaceTime()
{
	declare Integer TimeInt = GameTime - GUIPlayer.RaceStartTime;
	if(TimeInt < 0 || GUIPlayer.RaceStartTime <= 0) TimeInt = 0;
	declare Text TimeText = TL::TimeToText(TimeInt, True);
	return TimeText;
}

Void GaugeUpdate(CMlQuad _QuadLeft, CMlQuad _QuadRight, Real _GaugeRatio)
{
	declare SecondHalf = (_GaugeRatio > 0.5 && _GaugeRatio <= 1.) || (_GaugeRatio > 1.5 && _GaugeRatio <= 2.) || (_GaugeRatio > 2.5 && _GaugeRatio <= 3.);
	declare Real RotationDecal;
	declare Real SpeedBarreRadius;
	declare Real[] RotationDecalArray    = [0., -148., -315., 0.];
	declare Real[] SpeedBarreDecalArray  = [0., -148., -315., 0.];
	declare Real[] SpeedBarreRadiusArray = [22.0, 24.2, 27.3, 0.];
	declare Real MaxRotationRight = C_MaxRotationRight;

	if(_GaugeRatio > 3.){
		RotationDecal    = RotationDecalArray[3];
		SpeedBarreRadius = SpeedBarreRadiusArray[3];
	}
	else if(_GaugeRatio > 2.){
		MaxRotationRight = 79.;
		RotationDecal    = RotationDecalArray[2];
		SpeedBarreRadius = SpeedBarreRadiusArray[2];
	}
	else if(_GaugeRatio > 1.){
		MaxRotationRight = 75.5;
		RotationDecal    = RotationDecalArray[1];
		SpeedBarreRadius = SpeedBarreRadiusArray[1];
	}
	else
	{
		MaxRotationRight = 83.;
		RotationDecal    = RotationDecalArray[0];
		SpeedBarreRadius = SpeedBarreRadiusArray[0];
	}



	declare CMlQuad Quad_SpeedBarre <=> (Page.MainFrame.GetFirstChild("Quad_SpeedBarre")     as CMlQuad);
	if(_GaugeRatio == 0.)
	{
		Quad_SpeedBarre.Hide();
	}
	else
	{
		Quad_SpeedBarre.Show();
	}
	if(SecondHalf)
	{
		declare GaugeRatioRight       = 2.* (_GaugeRatio - 0.5);
		_QuadLeft 	.RelativeRotation = 0.;
		_QuadRight 	.RelativeRotation = RotationDecal + MaxRotationRight  * GaugeRatioRight;

		//declare Real BarreRotation         = -180 + 180 * GaugeRatioLeft-90.;
		declare Real BarreRotation         = RotationDecal + MaxRotationRight  * GaugeRatioRight-90.;
		declare Real BarreRotation2        = -RotationDecal + MaxRotationRight  * -GaugeRatioRight+90.;
		declare Real AngleRadian           = BarreRotation2*2.* ML::PI()/360.;
		declare Real PosX                  = ML::Cos(AngleRadian)*SpeedBarreRadius+0.;
		declare Real PosY                  = ML::Sin(AngleRadian)*SpeedBarreRadius-2.;
		Quad_SpeedBarre.RelativePosition.X = PosX;
		Quad_SpeedBarre.RelativePosition.Y = PosY;
		Quad_SpeedBarre.RelativeRotation   = BarreRotation;
	} 
	else
	{
		declare GaugeRatioLeft        = 2.*  _GaugeRatio ;
		_QuadLeft 	.RelativeRotation = -180 + 180 * GaugeRatioLeft;
		_QuadRight 	.RelativeRotation =  0.;
		
		declare Real BarreRotation         = -180 + 180 * GaugeRatioLeft-90.;
		declare Real BarreRotation2        = 180 + 180 * -GaugeRatioLeft+90.;
		declare Real AngleRadian           = BarreRotation2*2.* ML::PI()/360.;
		declare Real PosX                  = ML::Cos(AngleRadian)*SpeedBarreRadius+0.;
		declare Real PosY                  = ML::Sin(AngleRadian)*SpeedBarreRadius-2.0;
		Quad_SpeedBarre.RelativePosition.X = PosX;
		Quad_SpeedBarre.RelativePosition.Y = PosY;
		Quad_SpeedBarre.RelativeRotation   = BarreRotation;
	}
	if(_GaugeRatio >= 3.)
	{
		_QuadLeft 	.RelativeRotation 	=  0.;
		_QuadRight 	.RelativeRotation 	=  0.;
	}
}

Void SetGauges(CMlQuad[] _QuadsLeft, CMlQuad[] _QuadsRight, Real _GaugeRatio)
{
	
	declare Boolean Phase2 					= (_GaugeRatio > 1. && _GaugeRatio <= 2.);
	declare Boolean Phase3 					= (_GaugeRatio > 2. && _GaugeRatio <= 3.);
	declare Boolean Phase4 					= _GaugeRatio > 2.98;
	
	if(Phase4)
	{
		_QuadsLeft[0]	.Visible 			= True;
		_QuadsRight[0]	.Visible 			= True;
		_QuadsLeft[1]	.Visible 			= True;
		_QuadsRight[1]	.Visible 			= True;
		_QuadsLeft[2]	.Visible 			= True;
		_QuadsRight[2]	.Visible 			= True;
		_QuadsLeft[0]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[0]	.RelativeRotation 	= 83.;
		_QuadsLeft[1]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[1]	.RelativeRotation 	= 80.0;
		_QuadsLeft[2]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[2]	.RelativeRotation 	= 80.0;

		_QuadsLeft[0]	.Opacity            = 0.2;
		_QuadsRight[0]	.Opacity            = 0.2;
		_QuadsLeft[1]	.Opacity            = 0.3;
		_QuadsRight[1]	.Opacity            = 0.3;
		_QuadsLeft[2]	.Opacity            = 1.0;
		_QuadsRight[2]	.Opacity            = 1.0;
		//GaugeUpdate(_QuadsLeft[1], _QuadsRight[1], _GaugeRatio);
	}
	else if(Phase2)
	{
		_QuadsLeft[1]	.Visible 			= True;
		_QuadsRight[1]	.Visible 			= True;
		_QuadsLeft[2]	.Visible 			= False;
		_QuadsRight[2]	.Visible 			= False;
		_QuadsLeft[0]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[0]	.RelativeRotation 	= 83.;
		_QuadsLeft[0]	.Opacity            = 0.4;
		_QuadsRight[0]	.Opacity            = 0.4;
		_QuadsLeft[1]	.Opacity            = 1.0;
		_QuadsRight[1]	.Opacity            = 1.0;
		GaugeUpdate(_QuadsLeft[1], _QuadsRight[1], _GaugeRatio);
	}
	else 
	if(Phase3)
	{
		_QuadsLeft[1]	.Visible 			= True;
		_QuadsRight[1]	.Visible 			= True;
		_QuadsLeft[2]	.Visible 			= True;
		_QuadsRight[2]	.Visible 			= True;
		_QuadsLeft[0]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[0]	.RelativeRotation 	= 83.;
		_QuadsLeft[1]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[1]	.RelativeRotation 	= 80.0;
		_QuadsLeft[0]	.Opacity            = 0.4;
		_QuadsRight[0]	.Opacity            = 0.4;
		_QuadsLeft[1]	.Opacity            = 0.5;
		_QuadsRight[1]	.Opacity            = 0.5;
		_QuadsLeft[2]	.Opacity            = 1.0;
		_QuadsRight[2]	.Opacity            = 1.0;
		GaugeUpdate(_QuadsLeft[2], _QuadsRight[2], _GaugeRatio);
	}
	else // (Phase1)
	{
		_QuadsLeft[1]	.Visible 			= False;
		_QuadsRight[1]	.Visible 			= False;
		_QuadsLeft[2]	.Visible 			= False;
		_QuadsRight[2]	.Visible 			= False;
		_QuadsLeft[0]	.Opacity            = 1.0;
		_QuadsRight[0]	.Opacity            = 1.0;
		GaugeUpdate(_QuadsLeft[0], _QuadsRight[0], _GaugeRatio);
		
	}
}

Void UpdateWayPoint(Integer _LapTime, Integer _CheckpointInLap, Integer _CheckpointInRace)
{
	//Update Positions
	declare netread Integer[][] Net_OpponentsCheckpointsTime for UI;

	//////////////
	// --
	G_PlayersWayPointTime[0] = GameTime - GUIPlayer.RaceStartTime;
	for(I, 0, Net_OpponentsCheckpointsTime.count -1)
	{
		if(Net_OpponentsCheckpointsTime[I].existskey(_CheckpointInRace))
		{
			G_PlayersWayPointTime[I+1] = Net_OpponentsCheckpointsTime[I][_CheckpointInRace];
		}
		else
		{
			G_PlayersWayPointTime[I+1] = 0;
		}
	}
	declare Integer[Integer] Sort_PlayersWayPointTime;
	declare Integer Index = 0;
	for(I, 0, G_PlayersWayPointTime.count -1)
	{
		Index = 0;
		for(J, 0, G_PlayersWayPointTime.count -1)
		{
			if(G_PlayersWayPointTime[J] < G_PlayersWayPointTime[I])
			{
				Index += 1;
			}
			//Sort_PlayersWayPointTime
		}
		Sort_PlayersWayPointTime[Index] = G_PlayersWayPointTime[I];
	}
	//log("Sort_PlayersWayPointTime: " ^ Sort_PlayersWayPointTime);
	G_PlayersWayPointTime = Sort_PlayersWayPointTime;

	//////////////
	// RacePosition
	declare CMlFrame Frame_RacePosition <=> (Page.MainFrame.GetFirstChild("Frame_RacePosition") as CMlFrame);
	Index = 0;
	declare Integer TimeDif;
	declare Integer PlayerTimeWayPoint;
	foreach(I => Time in G_PlayersWayPointTime)
	{
		declare CMlFrame Frame_Player       <=> (Frame_RacePosition.GetFirstChild("Frame_Player"^I)  as CMlFrame);
		declare CMlLabel Label_PlayerTime   <=> (Frame_Player.GetFirstChild("Label_PlayerTime")          as CMlLabel);
		declare Integer TimeInt = G_PlayersWayPointTime[Index];

		declare Text TimeText = TL::TimeToText(TimeInt, True);
		//TimeText ^= TL::SubText(TimeInt  ^"", (TL::Length(TimeInt^"")-1), 1);
		Label_PlayerTime.SetText(TimeText);
		
		if(Net_OpponentsCheckpointsTime.count > 0)
		{
			declare Real TargetY = 1.8 - 7.8 *(Index*1);
			LibManialink_SetTargetPosition(Frame_Player, <-10., TargetY>);
			LibManialink_PresetAnimInsert(Frame_Player, 0, 400, "EaseInCubic");
		}

		if(Index == 0)
		{
			TimeDif = Time;
			PlayerTimeWayPoint = G_PlayersWayPointTime[I];
		}
		else if(Index == 1)
		{
			TimeDif -= Time;
		}
		Index += 1;
	}


	if(Net_OpponentsCheckpointsTime.existskey(0) && Net_OpponentsCheckpointsTime[0].count > 0)
	{
		declare CMlFrame Frame_Player     <=> (Frame_RacePosition.GetFirstChild("Frame_Player0")  as CMlFrame);
		declare CMlLabel Label_PlayerTime <=> (Frame_Player.GetFirstChild("Label_PlayerTime")     as CMlLabel);
		declare CMlQuad Quad_BgColor      <=> (Frame_Player.GetFirstChild("Quad_BgColor")     as CMlQuad);
		if(TimeDif < 0){
			declare Vec3 Color         = {{{C_ColorRGB_Blue}}};
			Label_PlayerTime.TextColor = <0.4,0.4,1.0>;
			Quad_BgColor.BgColor       = Color;
			Quad_BgColor.Opacity       = 0.5;
		}
		else if(TimeDif > 0){
			declare Vec3 Color         = {{{C_ColorRGB_Red}}};
			Label_PlayerTime.TextColor = Color;
			Quad_BgColor.BgColor       = Color;
			Quad_BgColor.Opacity       = 0.5;
		}
		else                 Label_PlayerTime.TextColor = <1.,1.0,1.0>;
	}


	//////////////
	// Laps
	declare netread Integer Net_NbLaps for UI;
	declare netread Boolean Net_IsMultiLap for UI;
	declare CMlFrame Frame_Laps <=> (Page.MainFrame.GetFirstChild("Frame_Laps") as CMlFrame);
	if(Net_NbLaps > 0 && Net_IsMultiLap) Frame_Laps.Show();
	else               Frame_Laps.Hide();
	declare CMlLabel Label_LapsPlayer <=> (Page.MainFrame.GetFirstChild("Label_LapsPlayer") as CMlLabel);
	declare CMlLabel Label_LapsMax    <=> (Page.MainFrame.GetFirstChild("Label_LapsMax") as CMlLabel);
	Label_LapsPlayer.Value = GUIPlayer.CurrentNbLaps+1^"";
	Label_LapsMax.Value    = "/"^Net_NbLaps;

	//////////////
	// WayPointInfo
	//declare	netread 	Integer[][] 	Net_OpponentsCheckpointsTime 	for UI;
	declare CMlFrame Frame_WayPoint      <=> (Page.MainFrame.GetFirstChild("Frame_WayPoint")           as CMlFrame);
	declare CMlFrame Frame_WayPointInfo0 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo0")      as CMlFrame);
	declare CMlLabel Label_WayPointInfo0 <=> (Frame_WayPointInfo0.GetFirstChild("Label_WayPointInfo")  as CMlLabel);
	declare CMlFrame Frame_WayPointInfo1 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo1")      as CMlFrame);
	declare CMlLabel Label_WayPointInfo1 <=> (Frame_WayPointInfo1.GetFirstChild("Label_WayPointInfo")  as CMlLabel);
	declare CMlFrame Frame_WayPointInfo2 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo2")      as CMlFrame);
	declare CMlLabel Label_WayPointInfo2 <=> (Frame_WayPointInfo2.GetFirstChild("Label_WayPointInfo")  as CMlLabel);
	declare CMlFrame Frame_WayPointInfo3 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo3")      as CMlFrame);
	declare CMlLabel Label_WayPointInfo3 <=> (Frame_WayPointInfo3.GetFirstChild("Label_WayPointInfo")  as CMlLabel);
	declare CMlQuad Quad_Color           <=> (Frame_WayPointInfo1.GetFirstChild("Quad_Color")          as CMlQuad);
	declare CMlQuad Quad_Color3          <=> (Frame_WayPointInfo3.GetFirstChild("Quad_Color")          as CMlQuad);
	declare CMlQuad Quad_Img             <=> (Frame_WayPointInfo1.GetFirstChild("Quad_Img")            as CMlQuad);
	declare CMlQuad Quad_Img3            <=> (Frame_WayPointInfo3.GetFirstChild("Quad_Img")            as CMlQuad);
	declare CMlQuad Quad_Ligne           <=> (Frame_WayPoint.GetFirstChild("Quad_Ligne")               as CMlQuad);
	declare CMlQuad Quad_Img2            <=> (Frame_WayPointInfo2.GetFirstChild("Quad_Img")            as CMlQuad);

	Frame_WayPoint.Show();
	Quad_Color.Show();
	Quad_Img.ChangeImageUrl("{{{IMGPATH^IMG_Arrow}}}");
	Quad_Img.Opacity= 0.;
	Quad_Img3.Opacity= 0.;
	
	declare Text Prefix;
		
	if(TimeDif < 0) {
		Frame_WayPointInfo1.RelativePosition.Y = 28.;// 45.3;
		Prefix = "";
		Quad_Color.BgColor = <0.,0.,1.>;
		Quad_Img.RelativeRotation = -90.;
		Quad_Img.RelativePosition.Y = -3.0;
	}
	else {
		Frame_WayPointInfo1.RelativePosition.Y = 24.;// 41.3;
		Prefix = "+";
		Quad_Color.BgColor = <1.,0.2,0.2>;
		Quad_Img.RelativeRotation = 90.;
		Quad_Img.RelativePosition.Y = -3.5;
	}
	if(Net_OpponentsCheckpointsTime.existskey(0) && Net_OpponentsCheckpointsTime[0].count <= 0)
	{
		Quad_Color.BgColor = <1., 1., 1.>;
	}

	Label_WayPointInfo1.SetText(Prefix^""^TL::TimeToText(TimeDif, True));
	Label_WayPointInfo0.SetText(TL::TimeToText(PlayerTimeWayPoint, True));

	declare Boolean StopWayPointInfo3Anim = False;
	declare Integer PrevBestLapTime;
	G_ActualCheckpointTime[_CheckpointInLap] = _LapTime;
	if(G_PrevCurrentNbLaps != GUIPlayer.CurrentNbLaps)
	{
		PrevBestLapTime = G_BestLapTime;

		if(G_BestLapTime > _LapTime || G_BestLapTime == 0)
		{
			G_LapRecordByCheckpointTime = G_ActualCheckpointTime;
			G_ActualCheckpointTime.clear();
			G_BestLapTime   = _LapTime;
		}

		if(GUIPlayer.CurrentNbLaps == 0)
		{
			G_LapRecordByCheckpointTime.clear();
			G_ActualCheckpointTime.clear();
			G_BestLapTime = 0;
		}

		if(GUIPlayer.CurrentNbLaps <= 1)
		{
			StopWayPointInfo3Anim = True;
		}
		LibManialink_AnimStop(Label_LapsPlayer);
		declare Vitesse = 400;
		LibManialink_SetTargetTextColor(Label_LapsPlayer, <0.8, 0.7, 0.1>);
		LibManialink_PresetAnimInsert(Label_LapsPlayer, 0, Vitesse, "EaseOutQuint");
		LibManialink_SetTargetTextColor(Label_LapsPlayer, <1.0, 1.0, 1.0>);
		LibManialink_PresetAnimInsert(Label_LapsPlayer, Vitesse, Vitesse, "EaseOutQuint");

		LibManialink_SetTargetScale(Label_LapsPlayer, 1.2);
		LibManialink_PresetAnimInsert(Label_LapsPlayer, 0, Vitesse, "EaseOutQuint");
		LibManialink_SetTargetScale(Label_LapsPlayer, 1.0);
		LibManialink_PresetAnimInsert(Label_LapsPlayer, Vitesse, Vitesse, "EaseOutQuint");




		G_PrevCurrentNbLaps = GUIPlayer.CurrentNbLaps;
	}

	if(G_LapRecordByCheckpointTime.existskey(_CheckpointInLap) && Net_NbLaps > 0)
	{
		declare Integer TimeDifLap = _LapTime - G_LapRecordByCheckpointTime[_CheckpointInLap];
		if(PrevBestLapTime > 0) TimeDifLap = _LapTime - PrevBestLapTime;
		Quad_Color3.Show();
		Frame_WayPointInfo3.Show();
		if(TimeDifLap < 0) {
			Frame_WayPointInfo3.RelativePosition.Y = 43.3;
			//Quad_Color3.BgColor = <0.,0.,1.>;
			Quad_Color3.Hide();
			Prefix = "";
		}
		else if(TimeDifLap > 0){
			Frame_WayPointInfo3.RelativePosition.Y = 43.3;
			//Quad_Color3.BgColor = <1.,0.2,0.2>;
			Quad_Color3.Hide();
			Prefix = "+";
		}
		else
		{
			Quad_Color3.Hide();
		}
		Label_WayPointInfo3.SetText(Prefix ^""^ TL::TimeToText(TimeDifLap, True));
		Label_WayPointInfo3.TextColor = {{{Colors::GetColor("Yellow")}}};
	}
	else
	{

	}

	if(G_HideWaypoint == -1)
	{

		LibManialink_AnimStop(Quad_Ligne);
		LibManialink_AnimStop(Frame_WayPointInfo0);
		LibManialink_AnimStop(Frame_WayPointInfo1);
		//=>IN
		Quad_Ligne.Size.Y = 0.;
		LibManialink_SetTargetSize(Quad_Ligne, <0.4, 40.>);
		LibManialink_PresetAnimInsert(Quad_Ligne, 0, 200, "EaseOutQuint");
		Frame_WayPointInfo0.RelativePosition.X = 30.;
		LibManialink_SetTargetPosition(Frame_WayPointInfo0, <0., Frame_WayPointInfo0.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_WayPointInfo0, 130, 500, "EaseOutQuint");
		declare	netread Integer[][] Net_OpponentsCheckpointsTime for UI;
		if(Net_OpponentsCheckpointsTime.existskey(0) && Net_OpponentsCheckpointsTime[0].count > 0)
		{
			Frame_WayPointInfo1.RelativePosition.X = -30.;
			LibManialink_SetTargetPosition(Frame_WayPointInfo1, <0., Frame_WayPointInfo1.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_WayPointInfo1, 130, 500, "EaseOutQuint");
		}

		
		if(Net_NbLaps > 0 && GUIPlayer.CurrentNbLaps > 0)
		{
			Label_WayPointInfo2.SetText("LAP " ^ TL::TimeToText(_LapTime, True));
			Label_WayPointInfo2.TextColor = {{{Colors::GetColor("Yellow")}}};
			Quad_Img2.ChangeImageUrl("{{{IMGPATH^IMG_Arrow2}}}");
			Quad_Img2.Size = <4., 4.>;
			
			LibManialink_AnimStop(Frame_WayPointInfo2);
			LibManialink_AnimStop(Frame_WayPointInfo3);

			//IN
			Frame_WayPointInfo2.RelativePosition.X = 30.;
			LibManialink_SetTargetPosition(Frame_WayPointInfo2, <0., Frame_WayPointInfo2.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_WayPointInfo2, 130, 500, "EaseOutQuint");
			if(!StopWayPointInfo3Anim)
			{
				Frame_WayPointInfo3.RelativePosition.X = -30.;
				LibManialink_SetTargetPosition(Frame_WayPointInfo3, <0., Frame_WayPointInfo3.RelativePosition_V3.Y>);
				LibManialink_PresetAnimInsert(Frame_WayPointInfo3, 130, 500, "EaseOutQuint");
			}

		}
		else
		{
			Frame_WayPointInfo2.RelativePosition.X = 31.;
			Frame_WayPointInfo3.RelativePosition.X = -31.;
		}
	}
	else
	{
		LibManialink_SetTargetScale(Label_WayPointInfo0, 1.1);
		LibManialink_PresetAnimInsert(Label_WayPointInfo0, 0, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo1, 1.1);
		LibManialink_PresetAnimInsert(Label_WayPointInfo1, 0, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo2, 1.1);
		LibManialink_PresetAnimInsert(Label_WayPointInfo2, 0, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo3, 1.1);
		LibManialink_PresetAnimInsert(Label_WayPointInfo3, 0, 100, "EaseLinear");

		LibManialink_SetTargetScale(Label_WayPointInfo0, 1.0);
		LibManialink_PresetAnimInsert(Label_WayPointInfo0, 100, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo1, 1.0);
		LibManialink_PresetAnimInsert(Label_WayPointInfo1, 100, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo2, 1.0);
		LibManialink_PresetAnimInsert(Label_WayPointInfo2, 100, 100, "EaseLinear");
		LibManialink_SetTargetScale(Label_WayPointInfo3, 1.0);
		LibManialink_PresetAnimInsert(Label_WayPointInfo3, 100, 100, "EaseLinear");

		Label_WayPointInfo2.SetText("LAP " ^ TL::TimeToText(_LapTime, True));
		Label_WayPointInfo2.TextColor = {{{Colors::GetColor("Yellow")}}};
		Quad_Img2.ChangeImageUrl("{{{IMGPATH^IMG_Arrow2}}}");
		Quad_Img2.Size = <4., 4.>;
		
		if(Net_NbLaps > 0 && GUIPlayer.CurrentNbLaps > 0)
		{
			Frame_WayPointInfo2.RelativePosition.X = 0.;
		}
		
		if(GUIPlayer.CurrentNbLaps > 1 || GUIPlayer.CurrentNbLaps >= 1 && _CheckpointInLap < G_LapRecordByCheckpointTime.count-1)
		{
			Frame_WayPointInfo3.RelativePosition.X = 0.;
			Frame_WayPointInfo3.RelativePosition.Y = 43.3;
		}
	}
	G_HideWaypoint = Now + 2500;

}

Void InitMapInfo()
{
	declare netread Text	Net_ModeName			for UI;

	//////////////
	// Title
	declare CMlLabel Label_MapName <=> (Page.MainFrame.GetFirstChild("Label_MapName") as CMlLabel);
	declare Text 	MapName         = TL::Trim(TL::StripFormatting(Map.MapName));
	Label_MapName.Value             = MapName;

	//////////////
	// Laps
	declare netread Integer Net_NbLaps for UI;
	declare netread Boolean Net_IsMultiLap for UI;
	declare CMlFrame Frame_Laps <=> (Page.MainFrame.GetFirstChild("Frame_Laps") as CMlFrame);
	if(Net_NbLaps > 0 && Net_IsMultiLap) Frame_Laps.Show();
	else               Frame_Laps.Hide();
	declare CMlLabel Label_LapsPlayer <=> (Page.MainFrame.GetFirstChild("Label_LapsPlayer") as CMlLabel);
	declare CMlLabel Label_LapsMax    <=> (Page.MainFrame.GetFirstChild("Label_LapsMax") as CMlLabel);
	Label_LapsPlayer.Value = "1";
	Label_LapsMax.Value    = "/"^Net_NbLaps;
	
	
	//////////////
	// RacePosition
	G_PlayersWayPointTime[0] = 0;
	G_PlayersWayPointTime[1] = -1;
	declare netread Integer[][] Net_OpponentsCheckpointsTime for UI;
	for(I, 0, Net_OpponentsCheckpointsTime.count -1)
	{
		if(!Net_OpponentsCheckpointsTime[I].existskey(0) || Net_OpponentsCheckpointsTime[I].count <= 0) {
			G_PlayersWayPointTime[I+1] = -1;
		} else{
			G_PlayersWayPointTime[I+1] = 0;
		}
	}
	//log("0 - Net_OpponentsCheckpointsTime:" ^ Net_OpponentsCheckpointsTime);
	//log("0 - G_PlayersWayPointTime:" ^ G_PlayersWayPointTime);

	declare CMlFrame Frame_RacePosition <=> (Page.MainFrame.GetFirstChild("Frame_RacePosition") as CMlFrame);
	
	declare Index = 0;
	for(I, 0, {{{Count_PlayerInfo}}})
	{
		declare CMlFrame Frame_Player       <=> (Frame_RacePosition.GetFirstChild("Frame_Player"^I)  as CMlFrame);
		if(!G_PlayersWayPointTime.existskey(I) || G_PlayersWayPointTime[I] < 0) {
			Frame_Player.Hide();
			//log("I: "^ I);
			continue;
		}
		else {
			Frame_Player.Show();
		}
		declare CMlLabel Label_PlayerName   <=> (Frame_Player.GetFirstChild("Label_PlayerName")     as CMlLabel);
		declare CMlLabel Label_PlayerTime   <=> (Frame_Player.GetFirstChild("Label_PlayerTime")          as CMlLabel);
		declare CMlQuad  Quad_Flag          <=> (Frame_Player.GetFirstChild("Quad_Flag")            as CMlQuad);
		declare CMlQuad Quad_BgColor        <=> (Frame_Player.GetFirstChild("Quad_BgColor")     as CMlQuad);
		Frame_Player.RelativePosition.Y = 1.8 - 7.8 *I;
		Quad_BgColor.Opacity = 0.;

		if(Index == 0) //Player
		{
			Label_PlayerName.Value = GUIPlayer.User.Name;
			Quad_Flag.ChangeImageUrl(GUIPlayer.User.CountryFlagUrl);
			Quad_Flag.Show();
		}
		else
		{
			declare netread Integer Net_OpponentChosen for UI;
			declare netread Integer Net_MedalOpponent 		for UI;
			if(Net_MedalOpponent != -1 && Net_MedalOpponent <= 4)
			{
				Label_PlayerName.SetText(C_MedalsName[Net_MedalOpponent]);
				Quad_Flag.ChangeImageUrl("{{{IMGPATH^IMG_MiniMedal}}}");
				if(Net_MedalOpponent <= 3)
				{
					Quad_Flag.Colorize = C_ColorMedals[Net_MedalOpponent];
					Quad_Flag.Show();
				}
				else
				{
					Quad_Flag.Hide();
				}
				
			}
			else
			{
				declare	netread Text[] Net_OpponentsName for UI;
				//if(Net_OpponentsName.existskey(I)) Label_PlayerName.SetText(Net_OpponentsName[I]);
				if(Net_OpponentsName.existskey(0)) Label_PlayerName.SetText(Net_OpponentsName[0]);
				Quad_Flag.Hide();
			}
			
		}
		Label_PlayerTime.Value = "0:00.00";
		Label_PlayerTime.TextColor = <1.,1.0,1.0>;

		Index += 1;
	}
	
	G_PrevCurrentNbLaps = 0;
	G_LapRecordByCheckpointTime.clear();
	G_ActualCheckpointTime.clear();
}

Void AnimHideUI()
{
	declare CMlFrame Frame_MapTitle     <=> (Page.MainFrame.GetFirstChild("Frame_MapTitle")      as CMlFrame);
	declare CMlFrame Frame_WayPoint     <=> (Page.MainFrame.GetFirstChild("Frame_WayPoint")      as CMlFrame);
	declare CMlFrame Frame_Speed        <=> (Page.MainFrame.GetFirstChild("Frame_Speed")         as CMlFrame);
	declare CMlFrame Frame_Laps         <=> (Page.MainFrame.GetFirstChild("Frame_Laps")          as CMlFrame);
	declare CMlFrame Frame_RacePosition <=> (Page.MainFrame.GetFirstChild("Frame_RacePosition")  as CMlFrame);
	declare CMlFrame Frame_Player0      <=> (Frame_RacePosition.GetFirstChild("Frame_Player0")   as CMlFrame);
	declare CMlFrame Frame_Player1      <=> (Frame_RacePosition.GetFirstChild("Frame_Player1")   as CMlFrame);
	declare CMlFrame Frame_Chrono       <=> (Page.MainFrame.GetFirstChild("Frame_Chrono")        as CMlFrame);


	declare netread Integer Net_SplitscreenMode for UI;

	LibManialink_AnimStop(Frame_MapTitle);
	LibManialink_SetTargetPosition(Frame_MapTitle, <-220., Frame_MapTitle.RelativePosition_V3.Y>);
	LibManialink_PresetAnimInsert(Frame_MapTitle, 0, 500, "EaseOutQuint");
	Frame_WayPoint.Hide();

	LibManialink_AnimStop(Frame_Speed);
	LibManialink_SetTargetPosition(Frame_Speed, <207.8, Frame_Speed.RelativePosition_V3.Y>);
	LibManialink_PresetAnimInsert(Frame_Speed, 0, 500, "EaseOutQuint");

	declare netread Integer Net_NbLaps for UI;
	if(Net_NbLaps > 0)
	{
		LibManialink_AnimStop(Frame_Laps);
		LibManialink_SetTargetPosition(Frame_Laps, <-242., Frame_Laps.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_Laps, 0, 500, "EaseOutQuint");
	}


	declare Integer Decale = 0;
	foreach(I => Time in G_PlayersWayPointTime)
	{
		declare CMlFrame Frame_Player       <=> (Frame_RacePosition.GetFirstChild("Frame_Player"^I)  as CMlFrame);
		LibManialink_AnimStop(Frame_Player);
		LibManialink_SetTargetPosition(Frame_Player, <50., Frame_Player.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_Player, Decale, 400, "EaseOutQuint");
		Decale += 50;
	}

	LibManialink_AnimStop(Frame_Chrono);
	LibManialink_SetTargetPosition(Frame_Chrono, <Frame_Chrono.RelativePosition_V3.X, -136.5>);
	LibManialink_PresetAnimInsert(Frame_Chrono, 0, 500, "EaseOutQuint");
	
}

Void AnimShowUI()
{
	declare CMlFrame Frame_MapTitle     <=> (Page.MainFrame.GetFirstChild("Frame_MapTitle")      as CMlFrame);
	declare CMlFrame Frame_WayPoint     <=> (Page.MainFrame.GetFirstChild("Frame_WayPoint")      as CMlFrame);
	declare CMlFrame Frame_Speed        <=> (Page.MainFrame.GetFirstChild("Frame_Speed")         as CMlFrame);
	declare CMlFrame Frame_Laps         <=> (Page.MainFrame.GetFirstChild("Frame_Laps")          as CMlFrame);
	declare CMlFrame Frame_RacePosition <=> (Page.MainFrame.GetFirstChild("Frame_RacePosition")  as CMlFrame);
	declare CMlFrame Frame_Player0      <=> (Frame_RacePosition.GetFirstChild("Frame_Player0")   as CMlFrame);
	declare CMlFrame Frame_Player1      <=> (Frame_RacePosition.GetFirstChild("Frame_Player1")   as CMlFrame);
	declare CMlFrame Frame_Chrono       <=> (Page.MainFrame.GetFirstChild("Frame_Chrono")        as CMlFrame);
	declare CMlFrame Frame_RankSplit    <=> (Page.MainFrame.GetFirstChild("Frame_RankSplit")        as CMlFrame);

	declare netread Integer Net_SplitscreenMode for UI;
	

	Frame_WayPoint.Show();

	//log("Speed["^GUIPlayer.User.Name^"]");
	declare Real SpeedPosXTarget;
	declare Real LapsPosXTarget;
	if(Net_SplitscreenMode == 2)
	{
		Frame_Speed.RelativePosition_V3.Y     = -93.;
		Frame_Laps.RelativePosition_V3.Y      = -105.;
		Frame_RankSplit.RelativePosition_V3.X = 120.;
		Frame_RankSplit.RelativePosition_V3.Y = 120.6;
		SpeedPosXTarget = 80.;
		LapsPosXTarget = -90.;


		LibManialink_AnimStop(Frame_RankSplit);
		LibManialink_SetTargetPosition(Frame_RankSplit, <75.4, Frame_RankSplit.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_RankSplit, 60, 500, "EaseOutCirc");
	}
	else if(Net_SplitscreenMode == 4)
	{
		Frame_Speed.RelativePosition_V3.Y = -56.;
		Frame_Laps.RelativePosition_V3.Y  = -76.;
		Frame_RankSplit.RelativePosition_V3.X = 120.;
		Frame_RankSplit.RelativePosition_V3.Y = 79.6;
		SpeedPosXTarget = 127.8;
		LapsPosXTarget = -152.;


		LibManialink_AnimStop(Frame_RankSplit);
		LibManialink_SetTargetPosition(Frame_RankSplit, <121.1, Frame_RankSplit.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_RankSplit, 60, 500, "EaseOutCirc");
	}
	else
	{
		Frame_Speed.RelativePosition_V3.Y = -56.;
		Frame_Laps.RelativePosition_V3.Y  = -76.;
		SpeedPosXTarget = 127.8;
		LapsPosXTarget = -152.;
	}

	LibManialink_AnimStop(Frame_Speed);
	LibManialink_SetTargetPosition(Frame_Speed, <SpeedPosXTarget, Frame_Speed.RelativePosition_V3.Y>);
	LibManialink_PresetAnimInsert(Frame_Speed, 60, 500, "EaseOutCirc");


	declare netread Integer Net_NbLaps for UI;
	if(Net_NbLaps > 0)
	{
		LibManialink_AnimStop(Frame_Laps);
		LibManialink_SetTargetPosition(Frame_Laps, <LapsPosXTarget, Frame_Laps.RelativePosition_V3.Y>);
		LibManialink_PresetAnimInsert(Frame_Laps, 10, 600, "EaseOutCirc");
	}

	if(Net_SplitscreenMode == 2 || Net_SplitscreenMode == 4)
	{
		Frame_Chrono.Hide();
		Frame_RacePosition.Hide();
		Frame_MapTitle.Hide();
		return;
	}
	
	LibManialink_AnimStop(Frame_MapTitle);
	LibManialink_SetTargetPosition(Frame_MapTitle, <-150., Frame_MapTitle.RelativePosition_V3.Y>);
	LibManialink_PresetAnimInsert(Frame_MapTitle, 50, 500, "EaseOutCirc");

	declare netread Text	Net_ModeName			for UI;
	declare netread Boolean	Net_IsRanking			for UI;
	declare netread Integer[][] Net_OpponentsCheckpointsTime for UI;

	//if(Net_ModeName == "Campaign_Solo" || Net_ModeName == "VersusReplay" || Net_ModeName == "SingleMapMode")
	if(Net_OpponentsCheckpointsTime.existskey(0) && Net_OpponentsCheckpointsTime[0].count > 0 && Net_IsRanking)
	{
		Frame_RacePosition.Show();
		declare Integer Decale = 0;
		foreach(I => Time in G_PlayersWayPointTime)
		{
			//if(Net_OpponentsCheckpointsTime[0].count <= 0 && I == 1) continue;
			declare CMlFrame Frame_Player       <=> (Frame_RacePosition.GetFirstChild("Frame_Player"^I)  as CMlFrame);
			LibManialink_AnimStop(Frame_Player);
			LibManialink_SetTargetPosition(Frame_Player, <-10., Frame_Player.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_Player, Decale, 400, "EaseOutCirc");
			Decale += 50;
		}
	}
	else
	{
		Frame_RacePosition.Hide();
	}

	Frame_Chrono.Show();
	LibManialink_AnimStop(Frame_Chrono);
	LibManialink_SetTargetPosition(Frame_Chrono, <Frame_Chrono.RelativePosition_V3.X, -76.5>);
	LibManialink_PresetAnimInsert(Frame_Chrono, 0, 380, "EaseOutCirc");
}


main() 
{	
	declare CMlFrame Frame_All      <=> (Page.MainFrame.GetFirstChild("Frame_All")	    as CMlFrame);
	declare CMlFrame Frame_WayPoint <=> (Page.MainFrame.GetFirstChild("Frame_WayPoint")	as CMlFrame);
	declare CMlFrame Frame_Speed    <=> (Page.MainFrame.GetFirstChild("Frame_Speed")	as CMlFrame);
	declare CMlLabel Label_Speed    <=> (Frame_Speed.GetFirstChild("Label_Speed")	    as CMlLabel);
	declare CMlLabel Label_Distance <=> (Frame_Speed.GetFirstChild("Label_Distance")	    as CMlLabel);
	declare CMlFrame Frame_Chrono     <=> (Page.MainFrame.GetFirstChild("Frame_Chrono")	    as CMlFrame);
	declare CMlLabel Label_Chrono <=> (Frame_Chrono.GetFirstChild("Label_Chrono")	    as CMlLabel);

	declare	netread 	Integer[][] 	Net_OpponentsCheckpointsTime 	for UI;
	declare netread 	Text		Net_ModeName					for UI;

	declare Integer M_TimeDiff;
	declare Integer M_CurCheckpointIndex = -1;
	declare Integer M_LastCpTime;
	declare Integer M_TriggerChallengeAnim;


	declare Quad_GaugeLeft1 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft1") 				as CMlQuad);
	declare Quad_GaugeRight1				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight1") 				as CMlQuad);
	declare Quad_GaugeLeft2 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft2") 				as CMlQuad);
	declare Quad_GaugeRight2				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight2") 				as CMlQuad);
	declare Quad_GaugeLeft3 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft3") 				as CMlQuad);
	declare Quad_GaugeRight3				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight3") 				as CMlQuad);
	
	declare Quad_GaugePersistentLeft1 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft1") 	as CMlQuad);
	declare Quad_GaugePersistentRight1 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight1") 	as CMlQuad);
	declare Quad_GaugePersistentLeft2 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft2") 	as CMlQuad);
	declare Quad_GaugePersistentRight2 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight2") 	as CMlQuad);
	declare Quad_GaugePersistentLeft3 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft3") 	as CMlQuad);
	declare Quad_GaugePersistentRight3 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight3") 	as CMlQuad);
	
	declare Quad_Gauge 						 = [Quad_GaugeLeft1,  			Quad_GaugeRight1, 			Quad_GaugeLeft2, Quad_GaugeRight2, Quad_GaugeLeft3, Quad_GaugeRight3];
	declare Quad_GaugeRight					 = [Quad_GaugeRight1, 			Quad_GaugeRight2, 			Quad_GaugeRight3];
	declare Quad_GaugeLeft 					 = [Quad_GaugeLeft1,  			Quad_GaugeLeft2,  			Quad_GaugeLeft3];
	
	declare Quad_GaugePersistent 			 = [Quad_GaugePersistentLeft1, 	Quad_GaugePersistentRight1, Quad_GaugePersistentLeft2, Quad_GaugePersistentRight2, Quad_GaugePersistentLeft3, Quad_GaugePersistentRight3];
	declare Quad_GaugePersistentLeft		 = [Quad_GaugePersistentLeft1,	Quad_GaugePersistentLeft2, 	Quad_GaugePersistentLeft3];
	declare Quad_GaugePersistentRight 		 = [Quad_GaugePersistentRight1, Quad_GaugePersistentRight2, Quad_GaugePersistentRight3];
	
	foreach(Quad in Quad_GaugePersistent) 	Quad.Blend = CMlQuad::EBlendMode::Add;


	declare PrevLapRaceTime = -1;
	G_HideWaypoint = -1;

	declare Boolean InitNextTime = False;
	declare Integer Net_HideIngameUI 			for Teams[0];
	declare Integer 	     Prev_HideIngameUI;
	declare Integer Net_ShowIngameUI 			for Teams[0];
	declare Integer 	     Prev_ShowIngameUI;
	Prev_HideIngameUI = -1;
	Prev_ShowIngameUI = -1;

	declare HackTestTime = Now + 1000;

	declare netread Integer Net_SplitscreenMode for UI;
	declare         Integer Pre_SplitscreenMode;


	declare CAudioSource Checkpoint       = Audio.CreateSound("{{{C_SoundPath^C_Sound_Checkpoint}}}", 0.0, False, False, False);
	declare CAudioSource CheckpointLate   = Audio.CreateSound("{{{C_SoundPath^C_Sound_CheckpointLate}}}", 0.0, False, False, False);
	declare CAudioSource CheckpointAhead  = Audio.CreateSound("{{{C_SoundPath^C_Sound_CheckpointAhead}}}", 0.0, False, False, False);
	
	declare netread Integer Net_NbLaps for UI;
	declare netread Boolean Net_IsMultiLap for UI;
	declare PrevNbLaps = Net_NbLaps;
	declare PrevIsMultilap = Net_IsMultiLap;

	while(True)  
	{
		yield;
		if(GUIPlayer == Null) continue;
		if(! PageIsVisible)
		{
			InitNextTime = True;
			continue;
		}
		LibManialink_AnimLoop();
		if(InitNextTime)
		{
			AnimShowUI();
			InitMapInfo();
			InitNextTime = False;
		}
		
		if (PrevNbLaps != Net_NbLaps || PrevIsMultilap != Net_IsMultiLap) {
			PrevNbLaps = Net_NbLaps;
			PrevIsMultilap = Net_IsMultiLap;
			
			//////////////
			// Laps
			declare CMlFrame Frame_Laps <=> (Page.MainFrame.GetFirstChild("Frame_Laps") as CMlFrame);
			if(Net_NbLaps > 0 && Net_IsMultiLap) Frame_Laps.Show();
			else               Frame_Laps.Hide();
			declare CMlLabel Label_LapsPlayer <=> (Page.MainFrame.GetFirstChild("Label_LapsPlayer") as CMlLabel);
			declare CMlLabel Label_LapsMax    <=> (Page.MainFrame.GetFirstChild("Label_LapsMax") as CMlLabel);
			Label_LapsPlayer.Value = GUIPlayer.CurrentNbLaps+1^"";//"1";
			Label_LapsMax.Value    = "/"^Net_NbLaps;
		}

		if(Prev_HideIngameUI != Net_HideIngameUI && Net_HideIngameUI != -1)
		{
			AnimHideUI();
			Prev_HideIngameUI = Net_HideIngameUI;
		}
		
		if(Prev_ShowIngameUI != Net_ShowIngameUI && Net_ShowIngameUI != -1)
		{
			AnimShowUI();
			Prev_ShowIngameUI = Net_ShowIngameUI;
		}


		if(G_HideWaypoint < Now && G_HideWaypoint != -1)
		{
			declare CMlFrame Frame_WayPoint      <=> (Page.MainFrame.GetFirstChild("Frame_WayPoint")           as CMlFrame);
			declare CMlFrame Frame_WayPointInfo0 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo0")      as CMlFrame);
			declare CMlFrame Frame_WayPointInfo1 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo1")      as CMlFrame);
			declare CMlFrame Frame_WayPointInfo2 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo2")      as CMlFrame);
			declare CMlFrame Frame_WayPointInfo3 <=> (Frame_WayPoint.GetFirstChild("Frame_WayPointInfo3")      as CMlFrame);
			declare CMlQuad  Quad_Ligne          <=> (Frame_WayPoint.GetFirstChild("Quad_Ligne")               as CMlQuad);

			LibManialink_SetTargetSize(Quad_Ligne, <0.2, 0.>);
			LibManialink_PresetAnimInsert(Quad_Ligne, 200, 300, "EaseOutQuint");
			LibManialink_SetTargetPosition(Frame_WayPointInfo0, <31., Frame_WayPointInfo0.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_WayPointInfo0, 0, 500, "EaseOutQuint");
			LibManialink_SetTargetPosition(Frame_WayPointInfo1, <-31., Frame_WayPointInfo1.RelativePosition_V3.Y>);
			LibManialink_PresetAnimInsert(Frame_WayPointInfo1, 0, 500, "EaseOutQuint");
			if(Net_NbLaps > 0)
			{
				LibManialink_SetTargetPosition(Frame_WayPointInfo2, <31., Frame_WayPointInfo2.RelativePosition_V3.Y>);
				LibManialink_PresetAnimInsert(Frame_WayPointInfo2, 0, 500, "EaseOutQuint");
				LibManialink_SetTargetPosition(Frame_WayPointInfo3, <-31., Frame_WayPointInfo3.RelativePosition_V3.Y>);
				LibManialink_PresetAnimInsert(Frame_WayPointInfo3, 0, 500, "EaseOutQuint");
			}

			G_HideWaypoint = -1;
		}

		/////////////////////
		// CONTINUE UPDATE   
		declare SpeedValue		= GUIPlayer.DisplaySpeed;
		declare CurrentNbLaps	= GUIPlayer.CurrentNbLaps;
		declare DriftDuration	= GUIPlayer.SkiddingDuration;
		declare DriftDistance	= ML::FloorInteger(GUIPlayer.SkiddingDistance);
		declare JumpDuration	= GUIPlayer.FlyingDuration;
		declare JumpDistance	= ML::FloorInteger(GUIPlayer.FlyingDistance);
		declare CarHeight		= ML::FloorInteger(GUIPlayer.Position.Y);


		//////////////
		// RaceTime
		Label_Chrono.SetText(GetRaceTime());
		
		//////////////
		// Speed
		Label_Speed.SetText(SpeedValue^"");
		declare Integer DistanceInt = ML::NearestInteger(GUIPlayer.Distance);
		declare Real Distance = DistanceInt*1./1000.;
		declare Text AddDistance;
		declare Integer DistanceLenght = TL::Length(Distance^"");
		declare Integer ExtraDistanceLength = TL::Length(DistanceInt^"");
		if(DistanceLenght == 2)      AddDistance = "000";
		else if(DistanceLenght == 3) AddDistance = "00";
		else if(DistanceLenght == 4) AddDistance = "0";
		else if(ExtraDistanceLength >= 4) {
			if (DistanceInt % 100 == 0) {
				AddDistance = "00";
			} else if (DistanceInt % 10 == 0) {
				AddDistance = "0";
			}
		}
		Label_Distance.SetText(Distance^""^AddDistance);
		declare M_GaugeRatio = SpeedValue / {{{C_SPEED_FULLCIRCLEVALUE}}};
		SetGauges(Quad_GaugeLeft, Quad_GaugeRight, M_GaugeRatio);

		/////////////////////
		// RACE EVENTS LOOP

		foreach(Event in RaceEvents)
		{
			switch(Event.Type)
			{
				case CTmRaceClientEvent::EType::WayPoint : 
				{
					//declare CBlockModel::EWayPointType WaypointType = 
					//log("Event.LapTime : " ^ Event.LapTime);
					//log("Event.CheckpointInRace: " ^ Event.CheckpointInRace);
					if(Event.IsEndRace)
					{
						Net_HideIngameUI = Now;
						continue;
					}

					declare	netread Integer[][] Net_OpponentsCheckpointsTime for UI;
					
					CheckpointLate.Stop();
					CheckpointAhead.Stop();
					Checkpoint.Stop();
					if (Map.TMObjective_IsLapRace && GUIPlayer.CurCheckpointLapTime < 0) {
						Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 1, 0.0);
					} else if(Net_OpponentsCheckpointsTime.existskey(0) && Net_OpponentsCheckpointsTime[0].existskey(Event.CheckpointInRace)) {
						declare TimeDiff = Event.RaceTime - Net_OpponentsCheckpointsTime[0][Event.CheckpointInRace];
						if (Event.IsEndRace) {
							Audio.PlaySoundEvent(CAudioManager::ELibSound::Checkpoint, 1, 0.0);
						} else {
							if(TimeDiff > 0) {
								CheckpointLate.Play();
							} else if(TimeDiff < 0) {
								CheckpointAhead.Play();
							} else {
								Checkpoint.Play();
							}
						}
					} else {
						Checkpoint.Play();
					}

					UpdateWayPoint(Event.LapTime, Event.CheckpointInLap, Event.CheckpointInRace);
				}
				case CTmRaceClientEvent::EType::Respawn : 
				{
					if(Event.Player.CurCheckpointRaceTime < 0) //Respawn depuis le début de la course
					{
						InitMapInfo();
					}
				}
			}
		}
		foreach(Event in PendingEvents) {
			switch(Event.Type) {
				case CMlEvent::Type::PluginCustomEvent: {
					
					switch(Event.PluginCustomEventType) {
						case "ShowUI" : {
							declare Integer Net_ShowIngameUI 			for Teams[0];
							Net_ShowIngameUI += 1;
						}
						case "HideUI" : {
						}
					}
				}
			}
		}
	}
}
--></script>
</manialink>
""";
	return ML;
}

Text Private_GetPressToRestart() 
{
	return ""; //Débranché
	declare IMGSelect 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare Color 			= Colors::GetColorXml("Red");
	
	declare TextStyle = """ 
		size="320 180" 
		 
		textfont="{{{G_FontMain}}}"
		textsize="3"
	""";
	
	declare Text ML =

	"""
	
	<!--<frame id="Frame_PressToRestart" pos="{{{143-C_PRESSTORESTART_IMG_SIZE/2.}}} -40 10." hidden="0">-->
	<frame id="Frame_PressToRestart" pos="115 -68 10." hidden="0" scale="0.8">
		<quad id="ButtonRespawn" image="{{{UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action2)}}}" 
			pos="-5 1.5 0" 	halign="right" valign="center" size="6 6"/>
		<label id="LabelRespawn" text="{{{_("|Infinitive|Respawn")}}}" {{{TextStyle}}} textprefix="$t" 
			pos="-13 2 0" 	halign="right" valign="center" textcolor="fff"/>
		<quad id="ButtonRestart" image="{{{UIButtons::GetIngameRestartImage()}}}" 
			pos="0 -5.5 0" 	halign="right" valign="center" size="6 6"/>
		<label id="LabelRestart" text="{{{_("|Infinitive|Restart")}}}" {{{TextStyle}}} textprefix="$t" 
			pos="-8 -5 0" 	halign="right" valign="center" textcolor="fff"/>
		
	<!--		
		<quad id="Quad_Bg" 
		pos="0  {{{-C_PRESSTORESTART_IMG_SIZE*0.032}}} .1" 
		size="{{{C_PRESSTORESTART_IMG_SIZE}}} {{{C_PRESSTORESTART_IMG_SIZE/2.}}}" 
		valign="center" 
		halign="center" 
		bgcolor="{{{Color}}}" 
		colorize="{{{Color}}}" 
		image="{{{IMGPATH^IMG_PRESS_TO_RESTART_BG}}}"
		/>	
		
		<label id="Label_Title" 
		pos="0 {{{C_PRESSTORESTART_TEXT_INTERLIGN}}} .2"
		valign="bottom" 
		{{{TextStyle}}}
		textcolor="{{{Color}}}"
		halign="center"
		textprefix="$t"
		/>
		
		
		<label id="Label_Subtitle" 
		pos="0 {{{-C_PRESSTORESTART_TEXT_INTERLIGN}}} .2"
		valign="top" 
		{{{TextStyle}}}
		halign="center"
		textcolor="{{{Color}}}"
		textprefix="$t"
		/>
--> 
	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	
	#Const DebugName  "L_PressToRestart"
	
	main() 
	{
		declare Frame_PressToRestart 	<=> (Page.MainFrame.GetFirstChild("Frame_PressToRestart") 	as CMlFrame);
		declare ButtonRespawn 				<=> (Page.MainFrame.GetFirstChild("ButtonRespawn") 				as CMlQuad);
		declare ButtonRestart 				<=> (Page.MainFrame.GetFirstChild("ButtonRestart") 				as CMlQuad);
		declare LabelRespawn 			<=> (Frame_PressToRestart.GetFirstChild("LabelRespawn") 			as CMlLabel);
		declare LabelRestart			<=> (Frame_PressToRestart.GetFirstChild("LabelRestart") 		as CMlLabel);
		
		declare Prev_PageIsVisible = !PageIsVisible;
		
		declare Vec3 UI_GaugeColor for UI;
		
		while(True) 
		{
			yield;
			
			if(Prev_PageIsVisible != PageIsVisible)
			{
				Prev_PageIsVisible = PageIsVisible;
				// if(Prev_PageIsVisible) TriggerShow 	= Now;
			}
			
			if(Prev_PageIsVisible)
			{
				declare Opacity = 0.6 + 0.4 * ML::Sin(Now*{{{C_SPEED_SLOWANIM_BLINKSPEED}}});
				// declare Opacity 	= 1.;
				// Quad_Bg			.Opacity = Opacity;
				
				ButtonRespawn		.Opacity = Opacity;
				ButtonRestart		.Opacity = Opacity;
				LabelRespawn		.Opacity = Opacity;
				LabelRestart		.Opacity = Opacity;
				
				// Label_Title		.Opacity = Opacity;
				// Label_Subtitle	.Opacity = Opacity;
				
				// Quad_Bg			.Colorize 	= UI_GaugeColor;
				// Label_Title		.TextColor	= UI_GaugeColor;
				// Label_Subtitle	.TextColor 	= UI_GaugeColor;
			}
		}
	}
	--></script>
	""";
	
	return ML;
}


Text Private_CampaignHelper() 
{
	declare IMGSelect 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare Color 			= Colors::GetColorXml("Red");
	
	declare TextStyle = """ 
		size="320 180" 
		 
		textfont="{{{G_FontMain}}}"
		textsize="3"
	""";
	
	declare Text ML =

	"""
	
	<!--<frame id="Frame_PressToRestart" pos="{{{-100}}} -60 10." hidden="0">-->
	<frame id="Frame_PressToRestart" pos="15 -40." hidden="1" scale="0.8">
		<quad id="ButtonRespawn" image="{{{UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action2)}}}" 
			pos="0 1.5 0" 	halign="right" valign="center" size="6 6"/>
		<label id="LabelRespawn" text="{{{_("|Infinitive|Respawn")}}}" {{{TextStyle}}} textprefix="$t" 
			pos="-8 2 0" 	halign="right" valign="center" textcolor="fff"/>
		<quad id="ButtonRestart" image="{{{UIButtons::GetIngameRestartImage()}}}" 
			pos="0 -5.5 0" 	halign="right" valign="center" size="6 6"/>
		<label id="LabelRestart" text="{{{_("|Infinitive|Restart")}}}" {{{TextStyle}}} textprefix="$t" 
			pos="-8 -5 0" 	halign="right" valign="center" textcolor="fff"/>

	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	
	#Const DebugName  "L_PressToRestart"
	
	main() 
	{
		declare Frame_PressToRestart 	<=> (Page.MainFrame.GetFirstChild("Frame_PressToRestart") 	as CMlFrame);
		//declare ButtonRespawn 				<=> (Page.MainFrame.GetFirstChild("ButtonRespawn") 				as CMlQuad);
		//declare ButtonRestart 				<=> (Page.MainFrame.GetFirstChild("ButtonRestart") 				as CMlQuad);
		//declare LabelRespawn 			<=> (Frame_PressToRestart.GetFirstChild("LabelRespawn") 			as CMlLabel);
		//declare LabelRestart			<=> (Frame_PressToRestart.GetFirstChild("LabelRestart") 		as CMlLabel);
		
		declare Prev_PageIsVisible = !PageIsVisible;
		
		declare Vec3 UI_GaugeColor for UI;
		
		while(True) 
		{
			yield;
			
			if(Prev_PageIsVisible != PageIsVisible)
			{
				Prev_PageIsVisible = PageIsVisible;
			}
			
			if(Prev_PageIsVisible)
			{
				declare Opacity = 0.5 + 0.5 * ML::Sin(Now*{{{C_SPEED_SLOWANIM_BLINKSPEED}}});
				
				//ButtonRespawn		.Opacity = Opacity;
				//ButtonRestart		.Opacity = Opacity;
				//LabelRespawn		.Opacity = Opacity;
				//LabelRestart		.Opacity = Opacity;
			}
		}
	}
	--></script>
	""";
	
	return ML;
}

Text Private_TimeOutTimer() 
{
	declare Color = Colors::GetColorXml("Red");
	
	declare Text ML =
	"""
	
	<frame id="Frame_TimeOutTimer" pos="0. 0. 0." hidden="0">
		<label id="Label_Explanation" 
			pos="0. 7. .2"
			valign="center"
			halign="center"
			textfont="{{{G_FontMain}}}"
			textcolor="{{{Color}}}"
			textsize="4"
			text="Warning Time out"
		/>
		
		<label id="Label_Title" 
			pos="0. 0. .2"
			valign="center"
			halign="center"
			textfont="{{{G_FontChrono}}}"
			textcolor="{{{Color}}}"
			
		/>
	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	
	#Const DebugName  "L_PressToRestart"
	
	main() 
	{
		declare Label_Title 				<=> (Page.MainFrame.GetFirstChild("Label_Title") 			as CMlLabel);
		declare Label_Explanation 			<=> (Page.MainFrame.GetFirstChild("Label_Explanation") 		as CMlLabel);
		
		declare netread Integer Net_TimeOutTimer for UI;
		
		Label_Title.Value = "00:00.0";
		
		while(True) 
		{
			yield;

			if(PageIsVisible) 
			{
				
				if(Net_TimeOutTimer >= 0) 
				{
					if(Net_TimeOutTimer <= 5000) 
					{
						Label_Explanation.Visible 	= True;
						Label_Title.Visible 		= True;
						declare Opacity 			= 0.5 + 0.5 * ML::Sin(Now*0.01);
						Label_Title.Opacity 		= Opacity;
						Label_Explanation.Opacity 	= Opacity;
						Label_Title.Value 			= TL::TimeToText(Net_TimeOutTimer, True);
					} 
					else 
					{
						Label_Title.Visible 		= False;
						Label_Explanation.Visible 	= False;
					}
				} 
				else 
				{
					Label_Title.Opacity 	= 1.0;
					Label_Title.Value 		= TL::TimeToText(0, True);
				}
			}
		}
	}
	--></script>
	""";
	
	return ML;
}



Void SetChallengeFrameVisibility(Boolean _Visibility)
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		
		
		
		declare	netwrite Boolean Net_ChallengeFrameVisibility for UI;
		// log("SET CHALLENGE FRAME VISIBILITY: "^Net_ChallengeFrameVisibility);
		Net_ChallengeFrameVisibility = _Visibility;
		
	}
}

Void SetMapNameFrameVisibility(Boolean _Visibility)
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		
		declare	netwrite Boolean Net_MapNameFrameVisibility for UI;
		
		Net_MapNameFrameVisibility = _Visibility;
		
	}
}

Void SetPlayerNickname(Text _PlayerNickname)
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		
		declare	netwrite Text Net_PlayerNickname for UI;
		
		Net_PlayerNickname = _PlayerNickname;
	}
}


Void ClearOpponentName()
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Text[] Net_OpponentsName for UI;
		Net_OpponentsName.clear();
	}

}

Void AddOpponentName(Text _OpponentName)
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Text[] Net_OpponentsName for UI;
		Net_OpponentsName.add(_OpponentName);
	}
}

Void SetOpponentName(Text _OpponentName)
{
	ClearOpponentName();
	AddOpponentName(_OpponentName);
}

Void SetIsTrackRandom(Boolean _IsTrackRandom)  {
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		declare netwrite Boolean Net_IsTrackRandom for UI;
		Net_IsTrackRandom = _IsTrackRandom;
	}
}

Void ClearOpponents()
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Integer[][] Net_OpponentsCheckpointsTime for UI;
		Net_OpponentsCheckpointsTime.clear();
	}
}

Void AddOpponent(Integer _OpponentType, Integer[] _OpponentCheckpointsTime)
{
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		
		declare	netwrite Integer 	Net_OpponentType 			for UI;
		declare	netwrite Integer[][] Net_OpponentsCheckpointsTime for UI;
		//declare	netwrite Integer[] 	Net_OpponentCheckpointsTime for UI;
		declare netwrite Integer	Net_OpponentUpdate			for UI;
		Net_OpponentType 				= _OpponentType;
		Net_OpponentsCheckpointsTime.add(_OpponentCheckpointsTime);
		Net_OpponentUpdate				+= 1;
		// Net_BestTime					+= 1;
	}
}
//Net_CheckpointsTimeOpponent ?
Void SetOpponent(Integer _OpponentType, Integer[] _OpponentCheckpointsTime)
{
	ClearOpponents();
	AddOpponent(_OpponentType, _OpponentCheckpointsTime);

	//log("2SetOpponent["^_OpponentType^"]: " ^ _OpponentCheckpointsTime);
	/*
	foreach(Player in AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		
		declare	netwrite Integer 	Net_OpponentType 			for UI;
		//declare	netwrite Integer[] 	Net_OpponentCheckpointsTime for UI;
		declare	netwrite Integer[][] Net_OpponentsCheckpointsTime for UI;
		declare netwrite Integer	Net_OpponentUpdate			for UI;
		Net_OpponentType 				= _OpponentType;
		Net_OpponentCheckpointsTime.add(_OpponentCheckpointsTime);
		//Net_OpponentCheckpointsTime 	= _OpponentCheckpointsTime;
		Net_OpponentUpdate				+= 1;
		// Net_BestTime					+= 1;
	}
	*/
}

Void SetVisibilityInGame(Boolean _Visible)
{
	Layers::SetVisibility(C_LAYERNAME_UI, _Visible);
}

Void SetShowInGame(Boolean _Visible)
{
	//LayerCustomEvent(Layers::Get(C_LAYERNAME_UI), "Show", Text[]);
}

Void SetVisibilityPressToRestart(Boolean _Visible) 
{
	Layers::SetVisibility(C_LAYERNAME_PRESS_TO_RESTART, _Visible);
}

Void SetVisibilityTimeOut(Boolean _Visible) 
{
	Layers::SetVisibility(C_LAYERNAME_TIMEOUT, _Visible);
}

Void SetVisiblityCampaignHelper(Boolean _Visible) {
	Layers::SetVisibility("CampaignHelper", _Visible);
}

Void SetNbLaps(Integer _NbLaps, Boolean _IsMultiLap) {
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare netwrite Integer Net_NbLaps     for UI;
		declare netwrite Boolean Net_IsMultiLap for UI;
		Net_NbLaps     = _NbLaps;
		Net_IsMultiLap = _IsMultiLap;
	}
}

Void LoadVolumes() 
{
}

Void IsTrackbuilder(Boolean _IsTrackbuilder) {
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netwrite Net_LibUI_IsEditor for UI = False;
	Net_LibUI_IsEditor = _IsTrackbuilder;
}

Void Load(CTmMode _Mode, Text _ModeName, Integer _SpawnDuration, Boolean _IsRanking) 
{
	Layers::DestroyAll();
	LoadVolumes();
	foreach(Player in Players)
	{
		declare UI <=> UIManager.GetUI(Player);
		declare netwrite Integer Net_SplitscreenMode for UI;
		Net_SplitscreenMode = UIManager.UI.count-1;
	}

	////////////////////////////////////////
	// INITS       
	UIButtons::Load();                         
	G_Mode 					   <=> _Mode;
	G_ModeName 					= _ModeName;
	
	G_SpawnDuration				= _SpawnDuration;
	
	G_FontTitle 				= Font::GetFontName("Title");
	G_FontMain 					= Font::GetFontName("Main");
	G_FontMainSmall 			= Font::GetFontName("MainSmall");
	G_FontChrono 				= Font::GetFontName("Chrono");
	G_FontNumberBig				= Font::GetFontName("NumberBig");
	G_SubFont					= Font::GetFontName("SubTitle");
	
	foreach(Player in AllPlayers) 
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare netwrite Boolean 	Net_IndependantLaps 	for UI;
		declare	netwrite Integer 	Net_OpponentType 		for UI;
		Net_IndependantLaps = G_Mode.IndependantLaps;
		Net_OpponentType	= TMC_MEDAL_NONE;
	}
	
	////////////////////////////////////////
	// VISIBILITY                           
	
	UIManager.UIAll.ScoreTableVisibility 				= CUIConfig::EVisibility::Normal;
	UIManager.UIAll.ScoreTableOnlyManialink 			= True;
	UIManager.UIAll.OverlayHideMapInfo 					= True;
	UIManager.UIAll.OverlayHideOpponentsInfo			= True;
	UIManager.UIAll.OverlayHideChat 					= True;
	UIManager.UIAll.OverlayHideCheckPointList 			= True;
	UIManager.UIAll.OverlayHideRoundScores 				= True;
	UIManager.UIAll.OverlayHideCountdown 				= True;
	UIManager.UIAll.OverlayHideChrono 					= True;
	UIManager.UIAll.OverlayHideSpeedAndDist 			= True;
	UIManager.UIAll.OverlayHidePersonnalBestAndRank 	= True;
	UIManager.UIAll.OverlayHidePosition 				= True;
	UIManager.UIAll.OverlayHideCheckPointTime 			= True;
	UIManager.UIAll.AltMenuNoDefaultScores 				= True;
	UIManager.UIAll.OverlayHideMultilapInfos 			= True;
	UIManager.UIAll.OverlayHide321Go 					= False;
	UIManager.UIAll.OverlayHideBackground				= True;
	UIManager.UIAll.AlliesLabelsVisibility 				= CUIConfig::ELabelsVisibility::Never;
	
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare netwrite Text Net_ModeName for UI;
		declare netwrite Boolean Net_IsRanking for UI;
		Net_ModeName  = _ModeName;
		Net_IsRanking = _IsRanking;
	}
	
	////////////////////////////////////////
	// CREATE LAYERS 
	if(G_IsSplitScreen) 
	{
		declare Integer PlayerCount = Players.count;
		declare Real ScaleUI 		= SplitScreenLibManialinkCoef::GetScaleFromPlayerCount(PlayerCount);
		declare Vec2 CoefPosUI 		= SplitScreenLibManialinkCoef::GetCoefPosFromPlayerCount(PlayerCount);
		declare Real SpecialScaleUI	= SplitScreenLibManialinkCoef::GetSpecialScaleFromPlayerCount(PlayerCount);
		declare Vec2 ClipSizeUI		= SplitScreenLibManialinkCoef::GetClipSizeFromPlayerCount(PlayerCount);
		
		UIManager.UILayerDestroyAll();
		foreach(IndexPlayer => Player in Players) 
		{
			declare UI 			<=> UIManager.GetUI(Player);
			declare Race 		<=> UIManager.UILayerCreate();
			Race		.ManialinkPage = Private_GetMLRace(ScaleUI, CoefPosUI, SpecialScaleUI, ClipSizeUI);
			UI.UILayers.add(Race);
		}
	} 
	else 
	{
		Layers::Create(C_LAYERNAME_UI, 	Private_GetMLRace(1., <0., 0.>, 1., <320., 180.>));
		Layers::Attach(C_LAYERNAME_UI);
		Layers::SetType(C_LAYERNAME_UI, CUILayer::EUILayerType::Normal);
		// EG : wtf ?
		declare Integer EndTime = Now + 100;
		wait(Now >= EndTime);
		
		Layers::Create(C_LAYERNAME_TIMEOUT, Private_TimeOutTimer());
		Layers::Attach(C_LAYERNAME_TIMEOUT);
		Layers::Create("CampaignHelper", Private_CampaignHelper());
		Layers::Attach("CampaignHelper");
		SetVisiblityCampaignHelper(False);
		SetVisibilityTimeOut(False); 
	}
	
	SetVisibilityPressToRestart(False);

}

Void SetSplitScreenModeUI(Boolean _SplitScreen) {
	G_IsSplitScreen = _SplitScreen;
}

Void UpdateTimeOutTimer(Integer _Timer) {
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare netwrite Integer Net_TimeOutTimer for UI;
		Net_TimeOutTimer = _Timer;
	}
}
